# List of locations and permission checks where it is acceptable to fail
# Each entry is defined as consecutive lines separated by a blank line where the first line is a
# regular expression to match against the permission info string. The remaining lines are regular
# expressions to match against separate stack lines' location portion only
# (e.g. <bundle-name>(<location>)) as provided with the --debug option in the same order as listed.

# pdfbox actually catches AccessControlException and continue without caching any fonts
# since DDF doesn't care about the actual fonts as it only processes the metadata from pdf documents
# we can safely ignore not having access to fonts on the system
java\.io\.FilePermission ".*", "read"
org\.apache\.pdfbox\.pdmodel\.font\.FileSystemFontProvider.*

# The static initializer for io.netty.util.NetUtil does attempt to find the file
# /proc/sys/net/core/somaxconn wether it is running on Windows or Linux. However, if unable to or
# if the security manager fails (which will be the case on Windows), it catches the exception and
# continue with a valid default for Windows
java\.io\.FilePermission ".*somaxconn", "read"
io\.netty\.util\.NetUtil\$.*:267

# At startup time, Karaf tries to create a system terminal and will fall back to a dumb one of it
# cannot.
java\.io\.FilePermission "<<ALL FILES>>", "execute"
org\.jline\.utils\.ExecHelper:35
org\.jline\.terminal\.TerminalBuilder:376
